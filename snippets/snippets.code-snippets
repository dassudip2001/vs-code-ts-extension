{
  "CaseCreate": {
    "body": [
      "import { BaseController } from '../../../../../core/providers/class/BaseController';",
      "import { ${2:DtoName} } from '../../Model/DTO/create.dto';",
      "import { ${3:RepoName} } from '../../Repository';",
      "",
      "export class CaseCreate${1:ModuleName} extends BaseController {",
      "  constructor() {",
      "    super();",
      "  }",
      "",
      "  async executeImpl(): Promise<any> {",
      "    const dto: ${2:DtoName} = this.req.body as ${2:DtoName};",
      "",
      "    try {",
      "      const result = await ${3:RepoName}.create(dto);",
      "      return this.ok(this.res, result);",
      "    } catch (err: any) {",
      "      return this.fail(err);",
      "    }",
      "  }",
      "}"
    ],
    "description": "Use Case Create",
    "prefix": "CaseCreate"
  },
  "CaseDelete": {
    "body": [
      "import { BaseController } from '../../../../../core/providers/class/BaseController';",
      "import { ${3:RepoName} } from '../../Repository';",
      "",
      "export class CaseDelete${1:ModuleName} extends BaseController {",
      "  constructor() {",
      "    super();",
      "  }",
      "",
      "  async executeImpl(): Promise<any> {",
      "    try {",
      "      const result = await ${3:RepoName}.delete(this.req.params.id);",
      "      return this.ok(this.res, result);",
      "    } catch (err: any) {",
      "      return this.fail(err);",
      "    }",
      "  }",
      "}"
    ],
    "description": "Use Case Delete",
    "prefix": "CaseDelete"
  },
  "CaseGetAll": {
    "body": [
      "import { BaseController } from '../../../../../core/providers/class/BaseController';",
      "import { ${3:RepoName} } from '../../Repository';",
      "",
      "export class CaseRead${1:ModuleName} extends BaseController {",
      "  constructor() {",
      "    super();",
      "  }",
      "",
      "  async executeImpl(): Promise<any> {",
      "    const dto = this.req.query;",
      "    try {",
      "      const result = await ${3:RepoName}.all(dto);",
      "      return this.ok(this.res, result);",
      "    } catch (err: any) {",
      "      return this.fail(err);",
      "    }",
      "  }",
      "}"
    ],
    "description": "Use Case Get All",
    "prefix": "CaseGetAll"
  },
  "CaseGetById": {
    "body": [
      "import { BaseController } from '../../../../../core/providers/class/BaseController';",
      "import { ${3:RepoName} } from '../../Repository';",
      "",
      "export class CaseFind${1:ModuleName} extends BaseController {",
      "  constructor() {",
      "    super();",
      "  }",
      "",
      "  async executeImpl(): Promise<any> {",
      "    try {",
      "      const result = await ${3:RepoName}.find(this.req.params.id);",
      "      return this.ok(this.res, result);",
      "    } catch (err: any) {",
      "      return this.fail(err);",
      "    }",
      "  }",
      "}"
    ],
    "description": "Use Case Get By Id",
    "prefix": "CaseGetById"
  },
  "CaseUpdate": {
    "body": [
      "import { BaseController } from '../../../../../core/providers/class/BaseController';",
      "import { ${2:DtoName} } from '../../Model/DTO/create.dto';",
      "import { ${3:RepoName} } from '../../Repository';",
      "",
      "export class CaseUpdate${1:ModuleName} extends BaseController {",
      "  constructor() {",
      "    super();",
      "  }",
      "",
      "  async executeImpl(): Promise<any> {",
      "    const dto: ${2:DtoName} = this.req.body as ${2:DtoName};",
      "",
      "    try {",
      "      const result = await ${3:RepoName}.update(this.req.params.id, dto);",
      "      return this.ok(this.res, result);",
      "    } catch (err: any) {",
      "      return this.fail(err);",
      "    }",
      "  }",
      "}"
    ],
    "description": "Use Case Update",
    "prefix": "CaseUpdate"
  },
  "Controller": {
    "body": [
      "import { CaseRead${1:ModuleName} } from './read.case';",
      "import { CaseFind${1:ModuleName} } from './find.case';",
      "import { CaseCreate${1:ModuleName} } from './create.case';",
      "import { CaseUpdate${1:ModuleName} } from './update.case';",
      "import { CaseDelete${1:ModuleName} } from './delete.case';",
      "",
      "const ${1:ModuleName}Controller = {",
      "  CaseRead: new CaseRead${1:ModuleName}(),",
      "  CaseFind: new CaseFind${1:ModuleName}(),",
      "  CaseCreate: new CaseCreate${1:ModuleName}(),",
      "  CaseUpdate: new CaseUpdate${1:ModuleName}(),",
      "  CaseDelete: new CaseDelete${1:ModuleName}(),",
      "};",
      "",
      "export default ${1:ModuleName}Controller;"
    ],
    "description": "Controller",
    "prefix": "Controller"
  },
  "Gateway": {
    "body": [
      "import { Router } from 'express';",
      "import { IRouteBase } from '../../../../../core/providers/interfaces/route-base.interface';",
      "import { ValidationMiddleware } from '../../../../../core/infra/http/middleware/middleware';",
      "",
      "import { ${1:ModuleName}CreateRequest } from '../Request/create.request';",
      "import ${1:ModuleName}Controller from '../Controllers';",
      "",
      "export class ${1:ModuleName}Gateway implements IRouteBase {",
      "    router: Router;",
      "    constructor(router: Router) {",
      "        this.router = router;",
      "        this.initRoutes();",
      "    }",
      "",
      "    public initRoutes() {",
      "        this.router.get('/', (req, res) => ${1:ModuleName}Controller.CaseRead.execute(req, res));",
      "        this.router.get('/:id', (req, res) => ${1:ModuleName}Controller.CaseFind.execute(req, res));",
      "        this.router.post('/', ValidationMiddleware(${1:ModuleName}CreateRequest), (req, res) => ${1:ModuleName}Controller.CaseCreate.execute(req, res));",
      "        this.router.put('/:id', ValidationMiddleware(${1:ModuleName}CreateRequest), (req, res) => ${1:ModuleName}Controller.CaseUpdate.execute(req, res));",
      "        this.router.delete('/:id', (req, res) => ${1:ModuleName}Controller.CaseDelete.execute(req, res));",
      "    }",
      "}"
    ],
    "description": "Gateway",
    "prefix": "Gateway"
  }
}
